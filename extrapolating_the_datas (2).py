# -*- coding: utf-8 -*-
"""ExtraPolating_the_datas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w6xVpOyfgElz99XClCatNOhtfDktNVi3
"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df1=pd.read_excel('/content/NO1Sep22-1Sep23.xlsx')
df1=df1.drop_duplicates()
df2=pd.read_csv('/content/NO20_21.csv')
df2=df2.drop_duplicates()
df2[['Date','Value','Measurement']]=df2['Date;Value;Measurement'].str.split(';',expand=True)
df2=df2.drop(columns='Date;Value;Measurement')
df2[['dates','time']]=df2['Date'].str.split(' ',expand=True)
df2=df2.drop(columns='Date')
df2['Measurement'].value_counts()
df2=df2.drop(columns='Measurement')
df2[['hour','minutes']]=df2['time'].str.split(':',expand=True)
df2['minutes'].value_counts()
df2=df2.drop(columns='minutes')
df2.drop(columns='time')
df2[['DATE','MONTH','YEAR']]=df2['dates'].str.split('-',expand=True)
df2=df2.drop(columns='dates')
df2=df2.drop(columns='time')
df1['date']=df1['dt'].dt.day
df1['year']=df1['dt'].dt.year
df1['month']=df1['dt'].dt.month
df1['hour']=df1['dt'].dt.hour
df1=df1.drop(columns='dt')
df1['year'].value_counts()
df2=df2.rename(columns={'DATE' : 'date'})
df2=df2.rename(columns={'MONTH':'month'})
df2=df2.rename(columns={'YEAR':'year'})
df2=df2.rename(columns={'Value' : 'values'})
df1['values']=df1['values']/1000
df1['year'].value_counts()
df2['year'].value_counts()
df2.drop(df2.head(23).index,inplace=True)
df2.drop(df2.tail(1).index,inplace=True)
df2=df2.reset_index()
df2['year'].value_counts()
df2=df2.drop(columns='index')
df1=df1.sort_values(by=['month','date','hour'])
df1_2023=df1[:(8735-2904)]
df1_2022=df1[(8735-2904):]
df1_2023=df1_2023.reset_index(drop=True)
df2['year'] = df2['year'].astype(int)
df2['month'] = df2['month'].astype(int)
df2['date'] = df2['date'].astype(int)
df2['hour'] = df2['hour'].astype(int)
for i in range(5830):
    new_row_data = {
        'date': df1_2023.iloc[i]['date'],
        'year': 2022,
        'month': df1_2023.iloc[i]['month'],
        'hour': df1_2023.iloc[i]['hour'],
        'values': (float(df1_2023.iloc[i]['values']) + float(df2.iloc[i]['values'])) / 2
    }
    df1_2022.loc[2904 + i] = new_row_data.copy()
df1_2022['month'].value_counts()
df1_2022['month'].value_counts()
value_counts_by_month_date = df1_2022.groupby(['month', 'date']).size()
value_counts_by_month_date_df = value_counts_by_month_date.reset_index(name='counts')
value_counts_by_month_date_df
value_counts_by_month_date_df['counts'].value_counts()
df1_2022=df1_2022.sort_values(by=['month','date','hour'])
october_31_data = df1_2022[(df1_2022['month'] == 10) & (df1_2022['date'] == 31)]

# Replace the date and month with October 30th
october_31_data['date'] = 30
october_31_data['month'] = 10

# Append the modified data back to the DataFrame
df1_2022 = df1_2022.append(october_31_data, ignore_index=True)

df1_2022.sort_values(by=['month','date','hour'],inplace=True)
df1_2022=df1_2022.reset_index(drop=True)
df1_2022=df1_2022.reset_index(drop=True)
for i in range (5830,8758):
  new_row_data={'date': df1_2022.iloc[i]['date'],'year': 2023,'month': df1_2022.iloc[i]['month'], 'hour':df1_2022.iloc[i]['hour'], 'values': (float(2*(df1_2022.iloc[i]['values']))-float(df2.iloc[i]['values']))}
  df1_2023.loc[i] = new_row_data
df_2023=df1_2023
df_2022=df1_2022
df_2021=df2
# Filter data for August 30th
august_30_data = df_2022[(df_2022['month'] == 8) & (df_2022['date'] == 30) & (df_2022['hour']==23)]

# Replace the date with August 31st
august_30_data['date'] = 31

# Append the modified data back to the DataFrame
df_2022 = df_2022.append(august_30_data, ignore_index=True)
df_2022.sort_values(by=['month','date','hour'], inplace=True)
march_26_data=df_2022[(df_2022['month']==3) & (df_2022['date']==25) & (df_2022['hour']==23)]
march_26_data['date'] = 26
df_2022 = df_2022.append(march_26_data, ignore_index=True)
df_2022.sort_values(by=['month','date','hour'], inplace=True)
df_2022['month'].value_counts()

df_2022['date'].value_counts()
df_2022=df_2022.reset_index(drop=True)
value_counts_by_month_date = df1_2022.groupby(['month', 'date']).size()
value_counts_by_month_date_df=value_counts_by_month_date.reset_index()
value_counts_by_month_date_df
df_2020 = pd.DataFrame()
for i in range(0, 8760):
    new_row = {'date': df_2021.loc[i]['date'],
           'year': 2020,
           'month': df_2021.loc[i]['month'],
           'hour': df_2021.loc[i]['hour'],
           'values': ((2 * float(df_2021.loc[i]['values'])) - (float(df_2022.loc[i]['values'])))}

    df_2020 = pd.concat([df_2020, pd.DataFrame([new_row])], ignore_index=True)
df_2020

# Create empty DataFrames for years 2019 and 2018
df_2019 = pd.DataFrame()
df_2018 = pd.DataFrame()

# Loop through the range of indices
for i in range(0, 8760):
    # Calculate values for the respective years
    values_2019 = ((2 * float(df_2020.loc[i]['values'])) - (float(df_2021.loc[i]['values'])))
    values_2018 = ((3 * float(df_2020.loc[i]['values'])) - (float(df_2021.loc[i]['values'])))  # Assuming df_2023 exists for 2018 data

    # Create new rows for each year and append them to the respective DataFrames
    new_row_2019 = {'date': df_2021.loc[i]['date'],
                    'year': 2019,
                    'month': df_2021.loc[i]['month'],
                    'hour': df_2021.loc[i]['hour'],
                    'values': values_2019}
    new_row_2018 = {'date': df_2021.loc[i]['date'],
                    'year': 2018,
                    'month': df_2021.loc[i]['month'],
                    'hour': df_2021.loc[i]['hour'],
                    'values': values_2018}

    df_2019 = pd.concat([df_2019, pd.DataFrame([new_row_2019])], ignore_index=True)
    df_2018 = pd.concat([df_2018, pd.DataFrame([new_row_2018])], ignore_index=True)

# Output the DataFrames for the respective years
print("DataFrame for 2020:")
print(df_2020)
print("\nDataFrame for 2019:")
print(df_2019)
print("\nDataFrame for 2018:")
print(df_2018)

# Copy rows for February 28th to February 29th
feb_28_rows = df_2020[(df_2020['month'] == 2) & (df_2020['date'] == 28)].copy()
feb_28_rows['date'] = 29

# Append the copied rows to the original DataFrame
df_2020 = df_2020.append(feb_28_rows, ignore_index=True)

# Sort df_2022 by 'month', 'day', and 'hour'
df_2020.sort_values(by=['month', 'date', 'hour'], inplace=True)

# Now df_2020 contains the details of February 29th copied from February 28th, and df_2022 is sorted as specified
df_2020=df_2020.reset_index(drop=True)
df_2020

import pandas as pd
dfDK_2019=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_2019_30_12_2019.xlsx")
dfDK_2019['HourUTC'] = pd.to_datetime(dfDK_2019['HourUTC'])
start_date = pd.to_datetime('2019-01-01')
end_date = pd.to_datetime('2020-01-01')
complete_date_range = pd.date_range(start=start_date, end=end_date, freq='H')
complete_df = pd.DataFrame({'HourUTC': complete_date_range})
complete_df=complete_df.drop(complete_df.tail(1).index)
merged_df = pd.merge(complete_df, dfDK_2019, on='HourUTC', how='left')
merged_df.fillna(0, inplace=True)
merged_df=merged_df.drop(columns='HourDK')
merged_df=merged_df.drop(columns='PriceArea')
dfDK_2019=merged_df

dfDK_2021=pd.read_excel('/content/ElectricityBalanceNonv 1_1_21_30_12_21.xlsx')
import pandas as pd
dfDK_2021=pd.read_excel("/content/ElectricityBalanceNonv 1_1_21_30_12_21.xlsx")
dfDK_2021['HourUTC'] = pd.to_datetime(dfDK_2021['HourUTC'])
start_date = pd.to_datetime('2021-01-01')
end_date = pd.to_datetime('2022-01-01')
complete_date_range = pd.date_range(start=start_date, end=end_date, freq='H')
complete_df = pd.DataFrame({'HourUTC': complete_date_range})
complete_df=complete_df.drop(complete_df.tail(1).index)
merged_df = pd.merge(complete_df, dfDK_2021, on='HourUTC', how='left')
merged_df.fillna(0, inplace=True)
merged_df=merged_df.drop(columns='HourDK')
merged_df=merged_df.drop(columns='PriceArea')
dfDK_2021=merged_df

import pandas as pd
dfDK_2020=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_20_30_12_20.xlsx")
dfDK_2020['HourUTC'] = pd.to_datetime(dfDK_2020['HourUTC'])
start_date = pd.to_datetime('2020-01-01')
end_date = pd.to_datetime('2021-01-01')
complete_date_range = pd.date_range(start=start_date, end=end_date, freq='H')
complete_df = pd.DataFrame({'HourUTC': complete_date_range})
complete_df=complete_df.drop(complete_df.tail(1).index)
merged_df = pd.merge(complete_df, dfDK_2020, on='HourUTC', how='left')
merged_df.fillna(0, inplace=True)
merged_df=merged_df.drop(columns='HourDK')
merged_df=merged_df.drop(columns='PriceArea')
dfDK_2020=merged_df

dfDK_2020['HourUTC'] = pd.to_datetime(dfDK_2020['HourUTC'])
dfDK_2020 = dfDK_2020[~((dfDK_2020['HourUTC'].dt.month == 2) & (dfDK_2020['HourUTC'].dt.day == 29))]
dfDK_2020=dfDK_2022.reset_index()
import pandas as pd
dfDK_2022=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_22_30_12_22.xlsx")
dfDK_2022['HourUTC'] = pd.to_datetime(dfDK_2022['HourUTC'])
start_date = pd.to_datetime('2022-01-01')
end_date = pd.to_datetime('2023-01-01')
complete_date_range = pd.date_range(start=start_date, end=end_date, freq='H')
complete_df = pd.DataFrame({'HourUTC': complete_date_range})
complete_df=complete_df.drop(complete_df.tail(1).index)
complete_df
merged_df = pd.merge(complete_df, dfDK_2022, on='HourUTC', how='left')
merged_df.fillna(0, inplace=True)
merged_df
merged_df=merged_df.drop(columns='HourDK')
merged_df=merged_df.drop(columns='PriceArea')
merged_df
dfDK_2022=merged_df


import pandas as pd
dfDK_2023=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_23_30_12_23.xlsx")
dfDK_2023['HourUTC'] = pd.to_datetime(dfDK_2023['HourUTC'])
start_date = pd.to_datetime('2023-01-01')
end_date = pd.to_datetime('2024-01-01')
complete_date_range = pd.date_range(start=start_date, end=end_date, freq='H')
complete_df = pd.DataFrame({'HourUTC': complete_date_range})
complete_df=complete_df.drop(complete_df.tail(1).index)
complete_df
merged_df = pd.merge(complete_df, dfDK_2023, on='HourUTC', how='left')
merged_df.fillna(0, inplace=True)
merged_df
merged_df=merged_df.drop(columns='HourDK')
merged_df=merged_df.drop(columns='PriceArea')
merged_df
dfDK_2023=merged_df
dfDK_2023

import pandas as pd
dfDK_2018=pd.read_excel("/content/ElectricityBalanceNonvDK1_1_2018_30_12_2018.xlsx")
dfDK_2018['HourUTC'] = pd.to_datetime(dfDK_2018['HourUTC'])
start_date = pd.to_datetime('2018-01-01')
end_date = pd.to_datetime('2019-01-01')
complete_date_range = pd.date_range(start=start_date, end=end_date, freq='H')
complete_df = pd.DataFrame({'HourUTC': complete_date_range})
complete_df=complete_df.drop(complete_df.tail(1).index)
complete_df
merged_df = pd.merge(complete_df, dfDK_2018, on='HourUTC', how='left')
merged_df.fillna(0, inplace=True)
merged_df
merged_df=merged_df.drop(columns='HourDK')
merged_df=merged_df.drop(columns='PriceArea')
merged_df
dfDK_2018=merged_df

covariance_df = pd.DataFrame()

# Assuming df_2018, df_2019, df_2020, df_2021, df_2022, df_2023, dfDK_2018, dfDK_2019, dfDK_2020, dfDK_2021, dfDK_2022, dfDK_2023 are your DataFrames

# Convert every column to float
df_2018['values'] = df_2018['values'].astype(float)
df_2019['values'] = df_2019['values'].astype(float)
df_2020['values'] = df_2020['values'].astype(float)
df_2021['values'] = df_2021['values'].astype(float)
df_2022['values'] = df_2022['values'].astype(float)
df_2023['values'] = df_2023['values'].astype(float)

dfDK_2018['TotalLoad'] = dfDK_2018['TotalLoad'].astype(float)
dfDK_2019['TotalLoad'] = dfDK_2019['TotalLoad'].astype(float)
dfDK_2020['TotalLoad'] = dfDK_2020['TotalLoad'].astype(float)
dfDK_2021['TotalLoad'] = dfDK_2021['TotalLoad'].astype(float)
dfDK_2022['TotalLoad'] = dfDK_2022['TotalLoad'].astype(float)
dfDK_2023['TotalLoad'] = dfDK_2023['TotalLoad'].astype(float)

# Perform calculations
covariance_df['sum of the consumer'] = (df_2018['values'] + df_2019['values'] + df_2020['values'] + df_2021['values'] + df_2022['values'] + df_2023['values']).astype(float)
covariance_df['sum of the square of the consumers'] = ((df_2018['values']**2) + (df_2019['values']**2) + (df_2020['values']**2) + (df_2021['values']**2) + (df_2022['values']**2) + (df_2023['values']**2)).astype(float)
covariance_df['sum of the producers'] = (dfDK_2018['TotalLoad'] + dfDK_2019['TotalLoad'] + dfDK_2020['TotalLoad'] + dfDK_2021['TotalLoad'] + dfDK_2022['TotalLoad'] + dfDK_2023['TotalLoad']).astype(float)
covariance_df['sum of the square of the producers'] = ((dfDK_2018['TotalLoad']**2) + (dfDK_2019['TotalLoad']**2) + (dfDK_2020['TotalLoad']**2) + (dfDK_2021['TotalLoad']**2) + (dfDK_2022['TotalLoad']**2) + (dfDK_2023['TotalLoad']**2)).astype(float)
covariance_df['produce of the consumer and producer'] = ((dfDK_2018['TotalLoad'] * df_2018['values']) + (dfDK_2019['TotalLoad'] * df_2019['values']) + (dfDK_2020['TotalLoad'] * df_2020['values']) + (dfDK_2021['TotalLoad'] * df_2021['values']) + (dfDK_2022['TotalLoad'] * df_2022['values']) + (dfDK_2023['TotalLoad'] * df_2023['values'])).astype(float)
covariance_df['hour']=df_2018['hour']
covariance_df['day']=df_2018['date']
covariance_df['month']=df_2018['month']

covariance_df = covariance_df.iloc[:8734]
covariance_df

covariance_df['Numerator'] = (8734 * covariance_df['produce of the consumer and producer']) - (covariance_df['sum of the consumer'] * covariance_df['sum of the producers'])
covariance_df['Denominator'] = (((8734 * covariance_df['sum of the square of the consumers']) - (covariance_df['sum of the consumer']**2)) * ((8734 * covariance_df['sum of the square of the producers']) - (covariance_df['sum of the producers']**2)))
covariance_df['Final'] = covariance_df['Numerator'] / (covariance_df['Denominator']**(0.5))
covariance_df=covariance_df.drop(columns='Numerator')
covariance_df=covariance_df.drop(columns='Denominator')
covariance_df

covariance_mean_hour_df = covariance_df.groupby(['hour'])['Final'].mean()

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.plot(covariance_mean_hour_df.index, covariance_mean_hour_df.values, marker='o', linestyle='-')
plt.xlabel('Hour')
plt.ylabel('Mean Final Value')
plt.title('Mean Final Value by Hour')
plt.grid(True)

# Show plot
plt.show()

