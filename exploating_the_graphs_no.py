# -*- coding: utf-8 -*-
"""Exploating the graphs NO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YS0Bb75FhR5AzvmIpUj3c5rkDaQE0dCC

# Importing the Datas
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df1=pd.read_csv('/content/NO20_21.csv')
df2=pd.read_excel('/content/NO1Sep22-1Sep23.xlsx')

print(df1.head())
print(df2.head())

"""# Changing the DF1"""

df1[['Dates','Value','Measurement']]=df1['Date;Value;Measurement'].str.split(';',expand=True)
df1=df1.drop(columns='Date;Value;Measurement')
df1[['Date','Time']]=df1['Dates'].str.split(' ',expand=True)
df1=df1.drop(columns='Dates')
df1[['date','month','year']]=df1['Date'].str.split('-',expand=True)
df1=df1.drop(columns='Date')
df1[['hour','minutes']]=df1['Time'].str.split(':',expand=True)
df1=df1.drop(columns=['Time','minutes','Measurement'])
df1.rename(columns={'Value':'values'},inplace=True)
df1.drop(df1.index[0:23], inplace=True)
df1.drop(df1.index[-1], inplace=True)
df1=df1.reset_index(drop=True)
df1['values'] = df1['values'].astype(float)
df1['values'] *= 1000
df1

"""# Changing the DF1"""

df1 = df1.drop_duplicates()
df1 = df1.drop(index=7275)
row_data = {
    'hour': 3,
    'date': 28,
    'month': 3,'year' : 2021, 'values': df1[(df1['hour'] == '02') & (df1['date'] == '28') & (df1['month'] == '03')].iloc[0]['values']
}
df1['date']=df1['date'].astype(int)
df1['month']=df1['month'].astype(int)
df1['hour']=df1['hour'].astype(int)
df1 = df1.append(row_data, ignore_index=True)
df1 = df1.sort_values(by=['month', 'date', 'hour'])
df1 = df1.reset_index(drop=True)
df1

"""# Changing the df2"""

df2['date']=df2['dt'].dt.day
df2['month']=df2['dt'].dt.month
df2['year']=df2['dt'].dt.year
df2['hour']=df2['dt'].dt.hour
df2=df2.drop(columns='dt')
df2

"""# Including the _ days of the DF2"""

df2['month'].value_counts()

df2[df2['month']==10]['date'].value_counts()

df2[df2['month']==3]['date'].value_counts()

df2[(df2['month']==3) & (df2['date']==26)]['hour'].value_counts()

october_30_data=(df2[df2['month']==10][df2['date']==31])
october_30_data['date']=30
df2=df2.append(october_30_data,ignore_index=True)
march_26_data=df2[df2['month']==3][df2['date']==26][df2['hour']==11]
march_26_data['hour']=12
df2=df2.append(march_26_data,ignore_index=True)
df2.sort_values(by=['month','date','hour'], inplace=True)
df2=df2.reset_index(drop=True)
df2

"""#Making it years campatible"""

df_2021=df1
df_2023=df2[0:5832]
df_2022=df2[5832:8760]
df_2022

df_2023

"""# Extrapolating the 2022 using the 2023 and 2021"""

new_rows_data=[]
for i in range (0,5832):
  new_row_data={'hour':df_2023.iloc[i]['hour'],'date':df_2023.iloc[i]['date'],'year':2022,'month':df_2023.iloc[i]['month'],'values':(((float(df_2023.iloc[i]['values']))+float(df_2021.iloc[i]['values']))/2)}
  new_rows_data.append(new_row_data)
df_2022=df_2022.append(new_rows_data,ignore_index=True)
df_2022.sort_values(by=['month','date','hour'], inplace=True)
df_2022=df_2022.reset_index(drop=True)
df_2022

"""#Extrapolating the 2023 using the 2022 and 2021"""

new_rows_data=[]
for i in range (5832,8760):
  new_row_data={'hour':df_2022.iloc[i]['hour'],'date':df_2022.iloc[i]['date'],'year':2023,'month':df_2022.iloc[i]['month'],'values':(2*float(df_2022.iloc[i]['values']))-float(df_2021.iloc[i]['values'])}
  new_rows_data.append(new_row_data)
df_2023=df_2023.append(new_rows_data,ignore_index=True)
df_2023.sort_values(by=['month','date','hour'], inplace=True)
df_2023=df_2023.reset_index(drop=True)
df_2023

df_2021

"""#Extrapolating the 2020,2019,2018 using 2021,2022,2023"""

import pandas as pd

# Create empty DataFrames for years 2020, 2019, and 2018
df_2020 = pd.DataFrame()
df_2019 = pd.DataFrame()
df_2018 = pd.DataFrame()

# Loop through the range of indices
for i in range(0, 8760):
    # Calculate values for the respective years
    values_2020 = ((2 * float(df_2021.iloc[i]['values'])) - (float(df_2022.iloc[i]['values'])))
    values_2019 = ((2 * values_2020) - (float(df_2021.iloc[i]['values'])))
    values_2018 = ((3 * values_2020) - (2 * float(df_2021.iloc[i]['values'])))

    # Create new rows for each year and append them to the respective DataFrames
    new_row_2020 = {
        'values': values_2020,
        'date': df_2021.iloc[i]['date'],
        'month': df_2021.iloc[i]['month'],
        'year': 2020,
        'hour': df_2021.iloc[i]['hour']
    }
    new_row_2019 = {
        'values': values_2019,
        'date': df_2021.iloc[i]['date'],
        'month': df_2021.iloc[i]['month'],
        'year': 2019,
        'hour': df_2021.iloc[i]['hour']
    }
    new_row_2018 = {
        'values': values_2018,
        'date': df_2021.iloc[i]['date'],
        'month': df_2021.iloc[i]['month'],
        'year': 2018,
        'hour': df_2021.iloc[i]['hour']
    }


    # Append new rows to the respective DataFrames
    df_2020 = pd.concat([df_2020, pd.DataFrame([new_row_2020])], ignore_index=True)
    df_2019 = pd.concat([df_2019, pd.DataFrame([new_row_2019])], ignore_index=True)
    df_2018 = pd.concat([df_2018, pd.DataFrame([new_row_2018])], ignore_index=True)

# Output the DataFrames for the respective years
print("DataFrame for 2023:")
print(df_2023)
print("DataFrame for 2022:")
print(df_2022)
print("DataFrame for 2021:")
print(df_2021)
print("DataFrame for 2020:")
print(df_2020)
print("\nDataFrame for 2019:")
print(df_2019)
print("\nDataFrame for 2018:")
print(df_2018)

"""# Table for the NO (6* 8760)"""

import pandas as pd
mixed_df=pd.DataFrame()
mixed_df['date']=df_2023['date']
mixed_df['month']=df_2023['month']
mixed_df['hour']=df_2023['hour']
mixed_df['values_2023']=df_2023['values'].astype(float).round(2)
mixed_df['values_2022']=df_2022['values'].astype(float).round(2)
mixed_df['values_2021']=df_2021['values'].astype(float).round(2)
mixed_df['values_2020']=df_2020['values'].astype(float).round(2)
mixed_df['values_2019']=df_2019['values'].astype(float).round(2)
mixed_df['values_2018']=df_2018['values'].astype(float).round(2)
mixed_df

"""#Random Graph Generator"""

import matplotlib.pyplot as plt
import random
i=random.randint(0, 8759)
y_values=[mixed_df['values_2018'].iloc[i],mixed_df['values_2019'].iloc[i],mixed_df['values_2020'].iloc[i],mixed_df['values_2021'].iloc[i],mixed_df['values_2022'].iloc[i],mixed_df['values_2023'].iloc[i]]
x_values=[2018,2019,2020,2021,2022,2023]
plt.plot(x_values,y_values)
plt.xlabel('year')
plt.ylabel('values')
plt.show()

"""# Importing the Producers Data(DK1)"""

# Changes so that i can run easliy on the second set
import pandas as pd
DK1_2018=pd.read_excel("/content/ElectricityBalanceNonvDK1_1_2018_30_12_2018.xlsx")
DK1_2019=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_2019_30_12_2019.xlsx")
DK1_2020=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_20_30_12_20.xlsx")
DK1_2021=pd.read_excel('/content/ElectricityBalanceNonv 1_1_21_30_12_21.xlsx')
DK1_2022=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_22_30_12_22.xlsx")
DK1_2023=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_23_30_12_23.xlsx")

"""# Changing the Datas(DK1)"""

def processed_dfs(start_year,end_year,df):
  start_date=pd.to_datetime(f'{start_year}-01-01')
  end_date=pd.to_datetime(f'{end_year}-01-01')
  complete_data_range=pd.date_range(start=start_date,end=end_date, freq='H')
  complete_df=pd.DataFrame({'HourUTC':complete_data_range})
  complete_df=complete_df.drop(complete_df.tail(1).index)
  df=pd.merge(complete_df,df,on='HourUTC',how='left')
  df.fillna(0,inplace=True)
  df['HourUTC'] = df['HourUTC'].astype(str)
  df[['dates', 'time']] = df['HourUTC'].str.split(' ', expand=True)
  df[['year','month','date']]=df['dates'].str.split('-',expand=True)
  df[['hour','minutes','seconds']]=df['time'].str.split(':',expand=True)
  df=df.drop(columns=['seconds','minutes','time','dates','HourUTC','PriceArea','HourDK'])
  return df

DK1_2018=processed_dfs(2018,2019,DK1_2018)
DK1_2019=processed_dfs(2019,2020,DK1_2019)
DK1_2020=processed_dfs(2020,2021,DK1_2020)
DK1_2021=processed_dfs(2021,2022,DK1_2021)
DK1_2022=processed_dfs(2022,2023,DK1_2022)
DK1_2023=processed_dfs(2023,2024,DK1_2023)
DK1_2020 = DK1_2020[(DK1_2020['month'] != '02') | (DK1_2020['date'] != '29')]
DK1_2020=DK1_2020.reset_index(drop=True)
print("DK1_2018")
print(DK1_2018)
print("DK1_2019")
print(DK1_2019)
print("DK1_2020")
print(DK1_2020)
print("DK1_2021")
print(DK1_2021)
print("DK1_2022")
print(DK1_2022)
print("DK1_2023")
print(DK1_2023)

"""# Mixed df of the Producers(DK1)"""

producer_mixed_df=pd.DataFrame()
producer_mixed_df['date']=DK1_2018['date']
producer_mixed_df['month']=DK1_2018['month']
producer_mixed_df['hour']=DK1_2018['hour']
producer_mixed_df['2018_values']=DK1_2018['TotalLoad'].astype(float).round(2)
producer_mixed_df['2019_values']=DK1_2019['TotalLoad'].astype(float).round(2)
producer_mixed_df['2020_values']=DK1_2020['TotalLoad'].astype(float).round(2)
producer_mixed_df['2021_values']=DK1_2021['TotalLoad'].astype(float).round(2)
producer_mixed_df['2022_values']=DK1_2022['TotalLoad'].astype(float).round(2)
producer_mixed_df['2023_values']=DK1_2023['TotalLoad'].astype(float).round(2)
producer_mixed_df

"""# Importing the Producers Datas(DK2)"""

DK2_2018=pd.read_excel("/content/ElectricityBalanceNonv DK2_1_1_201830_12_2018.xlsx")
DK2_2019=pd.read_excel("/content/ElectricityBalanceNonv DK2_1_1_2019_30_12_2019.xlsx")
DK2_2020=pd.read_excel("/content/ElectricityBalanceNonv Dk2_1_1_20_30_12_20.xlsx")
DK2_2021=pd.read_excel('/content/ElectricityBalanceNonv _DK2_1_1_21_30_12_21.xlsx')
DK2_2022=pd.read_excel("/content/ElectricityBalanceNonv DK1_1_1_22_30_12_22.xlsx")
DK2_2023=pd.read_excel("/content/ElectricityBalanceNonvDk2_1_1_23_30_12_23.xlsx")

"""# Changing the datas of Producers(DK2)"""

def processed_dfs(start_year,end_year,df):
  start_date=pd.to_datetime(f'{start_year}-01-01')
  end_date=pd.to_datetime(f'{end_year}-01-01')
  complete_data_range=pd.date_range(start=start_date,end=end_date, freq='H')
  complete_df=pd.DataFrame({'HourUTC':complete_data_range})
  complete_df=complete_df.drop(complete_df.tail(1).index)
  df=pd.merge(complete_df,df,on='HourUTC',how='left')
  df.fillna(0,inplace=True)
  df['HourUTC'] = df['HourUTC'].astype(str)
  df[['dates', 'time']] = df['HourUTC'].str.split(' ', expand=True)
  df[['year','month','date']]=df['dates'].str.split('-',expand=True)
  df[['hour','minutes','seconds']]=df['time'].str.split(':',expand=True)
  df=df.drop(columns=['seconds','minutes','time','dates','HourUTC','PriceArea','HourDK'])
  return df

DK2_2018=processed_dfs(2018,2019,DK2_2018)
DK2_2019=processed_dfs(2019,2020,DK2_2019)
DK2_2020=processed_dfs(2020,2021,DK2_2020)
DK2_2021=processed_dfs(2021,2022,DK2_2021)
DK2_2022=processed_dfs(2022,2023,DK2_2022)
DK2_2023=processed_dfs(2023,2024,DK2_2023)
DK2_2020 = DK2_2020[(DK2_2020['month'] != '02') | (DK2_2020['date'] != '29')]
DK2_2020=DK2_2020.reset_index(drop=True)
print("DK2_2018")
print(DK2_2018)
print("DK2_2019")
print(DK2_2019)
print("DK2_2020")
print(DK2_2020)
print("DK2_2021")
print(DK2_2021)
print("DK2_2022")
print(DK2_2022)
print("DK2_2023")
print(DK2_2023)

"""# Mixed df of the Producers(DK2)"""

df_2018

producer_mixed_df2=pd.DataFrame()
producer_mixed_df2['date']=DK2_2018['date']
producer_mixed_df2['month']=DK2_2018['month']
producer_mixed_df2['hour']=DK2_2018['hour']
producer_mixed_df2['2018_values']=DK2_2018['TotalLoad'].astype(float).round(2)
producer_mixed_df2['2019_values']=DK2_2019['TotalLoad'].astype(float).round(2)
producer_mixed_df2['2020_values']=DK2_2020['TotalLoad'].astype(float).round(2)
producer_mixed_df2['2021_values']=DK2_2021['TotalLoad'].astype(float).round(2)
producer_mixed_df2['2022_values']=DK2_2022['TotalLoad'].astype(float).round(2)
producer_mixed_df2['2023_values']=DK2_2023['TotalLoad'].astype(float).round(2)
producer_mixed_df2

"""# Calculating the Covariance of the DK1"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
from pylab import rcParams

import scipy
from scipy.stats import pearsonr

from scipy.stats import pearsonr

covariance_df = pd.DataFrame()
covariance_df['date'] = df_2018['date']
covariance_df['month'] = df_2018['month']
covariance_df['hour'] = df_2018['hour']
for i in range(0, 8760):
    row1 = mixed_df.iloc[i].drop(['month', 'date', 'hour']).astype(float)
    row2 = producer_mixed_df.iloc[i].drop(['month', 'date', 'hour']).astype(float)
    row3 = producer_mixed_df2.iloc[i].drop(['month', 'date', 'hour']).astype(float)
    covariance_df.loc[i, 'covariance_value_with_DK1'] = pearsonr(row1, row2)[0]
    covariance_df.loc[i, 'covariance_value_with_DK2'] = pearsonr(row1, row3)[0]
covariance_df.reset_index(drop=True, inplace=True)
covariance_df

"""# Plotting the Graphs(Histograms)"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt

# Set the figure size
plt.figure(figsize=(10, 6))

x = covariance_df['hour'].astype(str) + "-" + covariance_df['date'].astype(str) + "-" + covariance_df['month'].astype(str)
y = covariance_df['covariance_value_with_DK1']

plt.bar(x, y)
plt.xlabel('hour-day-month')
plt.ylabel('covariance_value')
plt.title('DK1_COVARIANCE_VALUES')

# Reduce the number of x-axis ticks by specifying the step size
step_size = int(len(x) * 0.02)  # 10 percent of the total number of ticks
plt.xticks(range(0, len(x), step_size), x[::step_size], rotation=90)

plt.tight_layout()  # Adjust layout to prevent overlapping labels

plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt

# Set the figure size
plt.figure(figsize=(10, 6))

x = covariance_df['hour'].astype(str) + "-" + covariance_df['date'].astype(str) + "-" + covariance_df['month'].astype(str)
y = covariance_df['covariance_value_with_DK2']

plt.bar(x, y)
plt.xlabel('hour-day-month')
plt.ylabel('covariance_value')
plt.title('DK2_COVARIANCE_VALUES')

# Reduce the number of x-axis ticks by specifying the step size
step_size = int(len(x) * 0.02)  # 10 percent of the total number of ticks
plt.xticks(range(0, len(x), step_size), x[::step_size], rotation=90)

plt.tight_layout()  # Adjust layout to prevent overlapping labels

plt.show()

"""#Calculating Bins"""

def process(a):
  if np.isnan(a):
    return 'NaN'
  if (a<=-0.7):
    return 'very strong negative'
  elif (a<=-0.5 and a>=-0.7):
    return 'strong negative'
  elif (a<=-0.3 and a>=-0.5):
    return 'moderate negative'
  elif(a<=0 and a>=-0.3):
    return 'weak negative'
  elif(a<=0.3 and a>=0):
    return 'weak positive'
  elif(a<=0.5 and a>=0.3):
    return 'moderate positive'
  elif(a<=0.7 and a>=0.5):
    return 'strong positive'
  else:
    return 'very strong positive'

covariance_df['strength_with_DK1']='0'
covariance_df['strength_with_DK2']='0'
for i in range (0,8760):
  covariance_df['strength_with_DK1'].iloc[i]=process(covariance_df['covariance_value_with_DK1'].iloc[i])
  covariance_df['strength_with_DK2'].iloc[i]=process(covariance_df['covariance_value_with_DK2'].iloc[i])

"""#Plot the Bin-Bar Graph"""

import matplotlib.pyplot as plt
x=['NaN','very strong negative','strong negative','moderate negative','weak negative','weak positive','moderate positive','strong positive','very strong positive']
y=[(covariance_df['strength_with_DK1']=='Nan').sum(),(covariance_df['strength_with_DK1']=='very strong negative').sum(),
 (covariance_df['strength_with_DK1']=='strong negative').sum(),(covariance_df['strength_with_DK1']=='moderate negative').sum(),(covariance_df['strength_with_DK1']=='weak negative').sum(),(covariance_df['strength_with_DK1']=='weak positive').sum(),(covariance_df['strength_with_DK1']=='moderate positive').sum(),(covariance_df['strength_with_DK1']=='strong positive').sum(),(covariance_df['strength_with_DK1']=='very strong positive').sum()]
plt.bar(x,y)
plt.xlabel('bin')
plt.ylabel('frequency')
plt.title('bin_bar DK1')
plt.xticks(rotation=90)
plt.show

import matplotlib.pyplot as plt
x=['NaN','very strong negative','strong negative','moderate negative','weak negative','weak positive','moderate positive','strong positive','very strong positive']
y=[(covariance_df['strength_with_DK2']=='Nan').sum(),(covariance_df['strength_with_DK2']=='very strong negative').sum(),
 (covariance_df['strength_with_DK2']=='strong negative').sum(),(covariance_df['strength_with_DK2']=='moderate negative').sum(),(covariance_df['strength_with_DK2']=='weak negative').sum(),(covariance_df['strength_with_DK2']=='weak positive').sum(),(covariance_df['strength_with_DK2']=='moderate positive').sum(),(covariance_df['strength_with_DK2']=='strong positive').sum(),(covariance_df['strength_with_DK2']=='very strong positive').sum()]
plt.bar(x,y)
plt.xlabel('bin')
plt.ylabel('frequency')
plt.title('bin_bar DK2')
plt.xticks(rotation=90)
plt.show

"""#Highest R value Finding throughout the year"""

top_5_max_values=covariance_df['covariance_value_with_DK1'].nlargest(5)
top_5_Max_indices=top_5_max_values.index
top_5_Max_indices

def make_graph(i):
  x=np.array([mixed_df['values_2018'].iloc[i],mixed_df['values_2019'].iloc[i],mixed_df['values_2020'].iloc[i],mixed_df['values_2021'].iloc[i],mixed_df['values_2022'].iloc[i],mixed_df['values_2023'].iloc[i]])
  y=np.array([producer_mixed_df['2018_values'].iloc[i],producer_mixed_df['2019_values'].iloc[i],producer_mixed_df['2020_values'].iloc[i],producer_mixed_df['2021_values'].iloc[i],producer_mixed_df['2022_values'].iloc[i],producer_mixed_df['2023_values'].iloc[i]])
  plt.scatter(x,y)
  slope,intercept,rvalue,pvalue,stderr=linregress(x,y)
  plt.plot(x,slope*x+intercept)
  plt.title(f"{mixed_df['date'].iloc[i]},{mixed_df['month'].iloc[i]},{mixed_df['hour'].iloc[i]} with {covariance_df['covariance_value_with_DK1'].iloc[i]} covariance value with DK1")
  plt.savefig(f"graph_{i}.png")
  plt.show()

import numpy as np
import matplotlib.pyplot as plt
import scipy as stats
from scipy.stats import linregress
!pip install scipy
for i in range (0,5):
  make_graph(top_5_Max_indices[i])

top_5_max_values2=covariance_df['covariance_value_with_DK2'].nlargest(5)
top_5_Max_indices2=top_5_max_values2.index
top_5_Max_indices2

def make_graph(i):
  x=np.array([mixed_df['values_2018'].iloc[i],mixed_df['values_2019'].iloc[i],mixed_df['values_2020'].iloc[i],mixed_df['values_2021'].iloc[i],mixed_df['values_2022'].iloc[i],mixed_df['values_2023'].iloc[i]])
  y=np.array([producer_mixed_df2['2018_values'].iloc[i],producer_mixed_df2['2019_values'].iloc[i],producer_mixed_df2['2020_values'].iloc[i],producer_mixed_df2['2021_values'].iloc[i],producer_mixed_df2['2022_values'].iloc[i],producer_mixed_df2['2023_values'].iloc[i]])
  plt.scatter(x,y)
  slope,intercept,rvalue,pvalue,stderr=linregress(x,y)
  plt.plot(x,slope*x+intercept)
  plt.title(f"{mixed_df['date'].iloc[i]},{mixed_df['month'].iloc[i]},{mixed_df['hour'].iloc[i]} with {covariance_df['covariance_value_with_DK2'].iloc[i]} covariance value with DK2")
  plt.savefig(f"graph_{i}.png")
  plt.show()

import numpy as np
import matplotlib.pyplot as plt
import scipy as stats
from scipy.stats import linregress
!pip install scipy
for i in range (0,5):
  make_graph(top_5_Max_indices2[i])

"""# Quantile plot over the year"""

covariance_df['month'] = covariance_df['month'].astype(int)
covariance_df['hour'] = covariance_df['hour'].astype(int)
import numpy as np
import matplotlib.pyplot as plt
datasets=[]
for i in range (0,24):
  dataset=np.array(covariance_df[covariance_df['hour']==i]['covariance_value_with_DK1'])
  dataset=dataset[~np.isnan(dataset)]
  datasets.append(dataset)
plt.title("Quantile plot of the year for 24 hour DK1")
plt.boxplot(datasets)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
datasets=[]
for i in range (0,24):
  dataset=np.array(covariance_df[covariance_df['hour']==i]['covariance_value_with_DK2'])
  dataset=dataset[~np.isnan(dataset)]
  datasets.append(dataset)
plt.title("Quantile plot of the year for 24 hour DK2")
plt.boxplot(datasets)
plt.show()

"""#Quantile Plot over the months with thier Highest R value"""

for j in range (1,13):
  print(f"The data for the month {j}")
  top_index=(covariance_df[covariance_df['month']==j]['covariance_value_with_DK1'].nlargest(1)).index
  print(covariance_df['covariance_value_with_DK1'].iloc[top_index])
  df_month=covariance_df[covariance_df['month']==j]
  datasets=[]
  for i in range (0,24):
    dataset=np.array(df_month[df_month['hour']==i]['covariance_value_with_DK1'])
    dataset=dataset[~np.isnan(dataset)]
    datasets.append(dataset)
  plt.title(f"Quantile plot of the month {j} for 24 hour DK1")
  plt.boxplot(datasets)
  plt.show()

for j in range (1,13):
  print(f"The data for the month {j}")
  top_index=(covariance_df[covariance_df['month']==j]['covariance_value_with_DK2'].nlargest(1)).index
  print(covariance_df['covariance_value_with_DK2'].loc[top_index])
  df_month=covariance_df[covariance_df['month']==j]
  datasets=[]
  for i in range (0,24):
    dataset=np.array(df_month[df_month['hour']==i]['covariance_value_with_DK2'])
    dataset=dataset[~np.isnan(dataset)]
    datasets.append(dataset)
  plt.title(f"Quantile plot of the month {j} for 24 hour DK2")
  plt.boxplot(datasets)
  plt.show()

"""# Table on which day both factories where available"""

import pandas as pd

high_correlation_days = pd.DataFrame(index=range(36), columns=['date', 'month', 'is_correlated_with_DK1'])

for i in range(0, 365):
    date_index = i * 24
    count = 0
    date = covariance_df['date'].iloc[date_index]
    month = covariance_df['month'].iloc[date_index]
    for j in range(0, 24):
      hour_index = date_index + j
      if covariance_df['covariance_value_with_DK1'].iloc[hour_index] > 0.5:
          count += 1
    if count > 12:
          is_correlated_DK1 = 1
    else:
          is_correlated_DK1 = 0
    count=0
    for j in range(0, 24):
          hour_index = date_index + j
          if covariance_df['covariance_value_with_DK2'].iloc[hour_index] > 0.5:
              count += 1
    if count > 12:
          is_correlated_DK2 = 1
    else:
          is_correlated_DK2 = 0
    is_correlated=0
    if (is_correlated_DK1==1 and is_correlated_DK2==1):
        is_correlated=1
    high_correlation_days.loc[i, 'date'] = date
    high_correlation_days.loc[i, 'month'] = month
    high_correlation_days.loc[i, 'is_correlated_with_DK1'] = is_correlated_DK1
    high_correlation_days.loc[i, 'is_correlated_with_DK2'] = is_correlated_DK2
    high_correlation_days.loc[i, 'with both'] = is_correlated
    if (is_correlated==1):
      print(high_correlation_days['month'].iloc[i],high_correlation_days['date'].iloc[i])

"""# Table on which hour both factories where available"""

import pandas as pd

high_correlation_hours = pd.DataFrame(columns=['hours', 'month', 'is_correlated_with_DK1','is_correlated_with_DK2'])

for i in range(1, 13):
    for j in range(0, 24):
        new_df_hour = covariance_df[(covariance_df['month'] == i) & (covariance_df['hour'] == j)]
        count = 0
        final_index=((24*(i-1))+j)
        high_correlation_hours.loc[final_index, 'month'] = i
        high_correlation_hours.loc[final_index, 'hours'] = j
        for index, row in new_df_hour.iterrows():
            if row['covariance_value_with_DK1'] > 0.5:
                count = count + 1
        if count > 7:
          high_correlation_hours.loc[final_index, 'is_correlated_with_DK1'] = 1
        else:
          high_correlation_hours.loc[final_index, 'is_correlated_with_DK1'] = 0
        count=0
        for index, row in new_df_hour.iterrows():
            if row['covariance_value_with_DK2'] > 0.5:
                count = count + 1
        if count > 7:
          high_correlation_hours.loc[final_index, 'is_correlated_with_DK2'] = 1
        else:
          high_correlation_hours.loc[final_index, 'is_correlated_with_DK2'] = 0
        if (high_correlation_hours.iloc[final_index]['is_correlated_with_DK1']==1 & high_correlation_hours.iloc[final_index]['is_correlated_with_DK2']==1):
          print(i," ", j)
high_correlation_hours

